go.property("speed", 10)
go.property("index", 0)
go.property("team_index", 1)
go.property("parent", msg.url())
go.property("move_vector", vmath.vector3())
go.property("circle_type", 1)
go.property("enabled", false)

local function move_circle(amount)
    local newPos = go.get_position()
    newPos = newPos + amount;

    go.set_position(newPos)
end

local function mirror(in_vector, normal)
	return in_vector - 2 * (vmath.dot(in_vector, normal)) * normal;
end

local function add_touchPos(table, pos)
	for index, value in ipairs(table) do
		value.touch_pos[#value.touch_pos+1] = pos
	end
end

function init(self)
	local pos_sign = self.team_index == 1 and 1 or -1
	self.move_vector = vmath.vector3(pos_sign, -1, 0)
	self.move_vector = vmath.normalize(self.move_vector)

	self.circles_table =  circles[self.team_index];

	self.enabled = false

	local dir = self.move_vector
	go.set_rotation(vmath.quat_from_to(vmath.vector3(1, 0, 0), dir))
end

function final(self)
	-- Add finalization code here
	-- Learn more: https://defold.com/manuals/script/
	-- Remove this function if not needed
end

function update(self, dt)
end

function fixed_update(self, dt)
	if dt > 1 or not self.enabled then
        return
    end

	move_circle(self.move_vector * self.speed * dt)
	local dir = self.move_vector
	go.set_rotation(vmath.quat_from_to(vmath.vector3(1, 0, 0), dir))
end

local trigger_response = hash("trigger_response")
local hash_normal = hash("normal")
local hash_bullet = hash("bullet")
function on_message(self, message_id, message, sender)
	if message_id == trigger_response then
		if message.other_group == hash_bullet then
			if message.enter then
				if bullets[message.other_id] == nil or bullets[message.other_id].team_index == self.team_index then
					return
				end

				bullets[message.other_id] = nil
				go.delete(message.other_id)

				for i = 1, self.index, 1 do
					if self.circles_table[i].circle then
						go.delete(self.circles_table[i].circle, true)
						self.circles_table[i] = {circle = nil, touch_pos = {}}
					end
				end
			end
		else
			if message.enter then
				if circles[self.team_index][self.index].touch_pos[1] == nil then
					add_touchPos(circles[self.team_index], go.get_position())
				end

				go.set_position(table.remove(circles[self.team_index][self.index].touch_pos, 1))

				local url = msg.url(message.other_id)
				url.fragment = "wallController"
				self.move_vector = mirror(self.move_vector, go.get(url, hash_normal))
			end
		end
    end
end

function on_input(self, action_id, action)
	-- Add input-handling code here. The game object this script is attached to
	-- must have acquired input focus:
	--
	--    msg.post(".", "acquire_input_focus")
	--
	-- All mapped input bindings will be received. Mouse and touch input will
	-- be received regardless of where on the screen it happened.
	-- Learn more: https://defold.com/manuals/input/
	-- Remove this function if not needed
end

function on_reload(self)
	-- Add reload-handling code here
	-- Learn more: https://defold.com/manuals/hot-reload/
	-- Remove this function if not needed
end
