go.property("speed", 10)

local function move_circles(circles, amount)
	for _, value in ipairs(circles) do
		local newPos = go.get_position(value)
		newPos = newPos + amount;

		go.set_position(newPos, value)
	end
end

local function mirror(in_vector)
	local normal = vmath.vector3(-1, 0, 0)
	return in_vector - 2 * (vmath.dot(in_vector, normal)) * normal;
end

function init(self)
	self.circles = {factory.create("#circle_factory")}
	self.move_vector = vmath.vector3(self.speed, -self.speed, 0)
end

function final(self)
	-- Add finalization code here
	-- Learn more: https://defold.com/manuals/script/
	-- Remove this function if not needed
end

function update(self, dt)
	move_circles(self.circles, self.move_vector * dt)
end

function fixed_update(self, dt)
	-- This function is called if 'Fixed Update Frequency' is enabled in the Engine section of game.project
	-- Can be coupled with fixed updates of the physics simulation if 'Use Fixed Timestep' is enabled in
	-- Physics section of game.project
	-- Add update code here
	-- Learn more: https://defold.com/manuals/script/
	-- Remove this function if not needed
end

local collision_response = hash("collision_response")
function on_message(self, message_id, message, sender)
	if message_id == collision_response then
        mirror(in_vector)
    end
end

function on_input(self, action_id, action)
	-- Add input-handling code here. The game object this script is attached to
	-- must have acquired input focus:
	--
	--    msg.post(".", "acquire_input_focus")
	--
	-- All mapped input bindings will be received. Mouse and touch input will
	-- be received regardless of where on the screen it happened.
	-- Learn more: https://defold.com/manuals/input/
	-- Remove this function if not needed
end

function on_reload(self)
	-- Add reload-handling code here
	-- Learn more: https://defold.com/manuals/hot-reload/
	-- Remove this function if not needed
end
