local function update_speed_circles(speed, team_index)
	local circles_table =  circles[team_index];

	for _, value in ipairs(circles_table) do
		go.set(value.circle, "speed", speed)
	end
end

local function update_move_vectors(move_vector, team_index)
	local circles_table =  circles[team_index];

	for index, value in ipairs(circles_table) do
		go.set(value.circle, "move_vector", move_vector)

		local pos = 13.7 * index
		go.set_position(move_vector * pos, value.circle)
		go.set_rotation(vmath.quat_from_to(vmath.vector3(1, 0, 0), move_vector), value.circle)
	end
end

local function add_circle(self, circle_type)
	local circles_table =  circles[self.team_index];

	local circle = factory.create("#circle_factory", nil, nil, {speed = self.init_speed, index = #circles_table+1, team_index = self.team_index, circle_type = circle_type, parent = msg.url(), move_vector = self.move_vector}, 0.1)
	local circle_url = msg.url(circle)
	circle_url.fragment= "circleController"
	circles_table[#circles_table+1] = {circle = circle_url, touch_pos = {}}

	local pos = 13.7 * #circles_table

	go.set_position(self.move_vector * pos, circle)
	go.set_parent(circle, ".")

	if circle_type == 1 then
		self.speed = self.speed + self.type_one_speed

	elseif circle_type == 2 then
		local weapon = factory.create("#weapon_factory", vmath.vector3(0), nil, {team_index = self.team_index, dir = 1})
		go.set_parent(weapon, circle)

	elseif circle_type == 3 then
		local weapon = factory.create("#weapon_factory", vmath.vector3(0), nil, {team_index = self.team_index, dir = -1})
		go.set_parent(weapon, circle)

	elseif circle_type == 4 then
		local shield = factory.create("#shield_factory", nil, nil, {team_index = self.team_index, parent = circle_url})
		go.set_position(vmath.vector3(0, 86, 0), shield)
		go.set_parent(shield, circle)

		local shield = factory.create("#shield_factory", nil, nil, {team_index = self.team_index, parent = circle_url})
		go.set_position(vmath.vector3(0, -86, 0), shield)
		go.set_parent(shield, circle)
	end

	update_speed_circles(self.speed, self.team_index)
	go.set(circle_url, "enabled", false)
end

go.property("speed", 10)
go.property("type_one_speed", 10)
go.property("team_index", 1)

circles = {{}, {}}
bullets = {}

function init(self)
	local pos_sign = self.team_index == 1 and 1 or -1
	go.set_position(vmath.vector3(-940 * pos_sign, 520, 0))

	self.move_vector = vmath.vector3(pos_sign, -1, 0)
	self.move_vector = vmath.normalize(self.move_vector)

end

function final(self)
	-- Add finalization code here
	-- Learn more: https://defold.com/manuals/script/
	-- Remove this function if not needed
end

function update(self, dt)
end

function fixed_update(self, dt)
	for key, value in pairs(bullets) do
		if self.team_index == value.team_index then
			local pos = go.get_position(key)
			pos = pos + value.move * dt

			go.set_position(pos, key)
		end
	end
end

function on_message(self, message_id, message, sender)
	if message_id == hash("enable_all_circles") then
		for _, value in ipairs(circles[self.team_index]) do
			go.set(value.circle, "enabled", true)
		end

	elseif message_id == hash("add_speed") then
		add_circle(self, 1)

	elseif message_id == hash("add_weapon_right") then
		add_circle(self, 2)

	elseif message_id == hash("add_weapon_left") then
		add_circle(self, 3)

	elseif message_id == hash("add_shield") then
		add_circle(self, 4)

	elseif message_id == hash("up_move_vector") then
		self.move_vector = vmath.rotate(vmath.quat_rotation_z(math.rad(5)), self.move_vector)
		update_move_vectors(self.move_vector, self.team_index)

	elseif message_id == hash("down_move_vector") then
		self.move_vector = vmath.rotate(vmath.quat_rotation_z(math.rad(-5)), self.move_vector)
		update_move_vectors(self.move_vector, self.team_index)
	end
end

function on_input(self, action_id, action)
	-- Add input-handling code here. The game object this script is attached to
	-- must have acquired input focus:
	--
	--    msg.post(".", "acquire_input_focus")
	--
	-- All mapped input bindings will be received. Mouse and touch input will
	-- be received regardless of where on the screen it happened.
	-- Learn more: https://defold.com/manuals/input/
	-- Remove this function if not needed
end

function on_reload(self)
	-- Add reload-handling code here
	-- Learn more: https://defold.com/manuals/hot-reload/
	-- Remove this function if not needed
end
