local function update_speed_circles(speed, team_index)
	local circles_table =  circles[team_index];

	for _, value in ipairs(circles_table) do
		go.set(value.circle, "speed", speed)
	end
end

local function add_circle(self, circle_type)
	local circles_table =  circles[self.team_index];

	local circle = factory.create("#circle_factory", nil, nil, {speed = self.init_speed, index = #circles_table+1, team_index = self.team_index, circle_type = circle_type, parent = msg.url()})
	local circle_url = msg.url(circle)
	circle_url.fragment= "circleController"
	circles_table[#circles_table+1] = {circle =circle_url, touch_pos = {}}

	local pos = 86 * #circles_table

	local pos_sign = self.team_index == 1 and 1 or -1
	go.set_position(vmath.vector3(pos * pos_sign, -pos, 0), circle)
	go.set_parent(circle, ".")

	if circle_type == 1 then
		self.speed = self.speed + self.type_one_speed
		update_speed_circles(self.speed, self.team_index)
	end
end

go.property("speed", 10)
go.property("type_one_speed", 10)
go.property("team_index", 1)

circles = {{}, {}}

function init(self)

	add_circle(self, 1)
	add_circle(self, 1)
	add_circle(self, 1)
	add_circle(self, 1)
	add_circle(self, 1)
	add_circle(self, 1)
	add_circle(self, 1)
	add_circle(self, 1)
	add_circle(self, 1)
	add_circle(self, 1)

	local pos_sign = self.team_index == 1 and 1 or -1
	go.set_position(vmath.vector3(-960 * pos_sign, 540, 0))
end

function final(self)
	-- Add finalization code here
	-- Learn more: https://defold.com/manuals/script/
	-- Remove this function if not needed
end

function update(self, dt)
end

function fixed_update(self, dt)
	-- This function is called if 'Fixed Update Frequency' is enabled in the Engine section of game.project
	-- Can be coupled with fixed updates of the physics simulation if 'Use Fixed Timestep' is enabled in
	-- Physics section of game.project
	-- Add update code here
	-- Learn more: https://defold.com/manuals/script/
	-- Remove this function if not needed
end

function on_message(self, message_id, message, sender)

end

function on_input(self, action_id, action)
	-- Add input-handling code here. The game object this script is attached to
	-- must have acquired input focus:
	--
	--    msg.post(".", "acquire_input_focus")
	--
	-- All mapped input bindings will be received. Mouse and touch input will
	-- be received regardless of where on the screen it happened.
	-- Learn more: https://defold.com/manuals/input/
	-- Remove this function if not needed
end

function on_reload(self)
	-- Add reload-handling code here
	-- Learn more: https://defold.com/manuals/hot-reload/
	-- Remove this function if not needed
end
