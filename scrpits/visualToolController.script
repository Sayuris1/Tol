local camera = require "orthographic.camera"
local cursor = require "in.cursor"

function init(self)
	msg.post(".", "acquire_input_focus")

	self.url_robot1 = msg.url(nil, "/robot1", "robotController")
	self.url_robot2 = msg.url(nil, "/robot2", "robotController")
end

function final(self)
	-- Add finalization code here
	-- Learn more: https://defold.com/manuals/script/
	-- Remove this function if not needed
end

function update(self, dt)
	-- Add update code here
	-- Learn more: https://defold.com/manuals/script/
	-- Remove this function if not needed
end

function fixed_update(self, dt)
	-- This function is called if 'Fixed Update Frequency' is enabled in the Engine section of game.project
	-- Can be coupled with fixed updates of the physics simulation if 'Use Fixed Timestep' is enabled in
	-- Physics section of game.project
	-- Add update code here
	-- Learn more: https://defold.com/manuals/script/
	-- Remove this function if not needed
end

function on_message(self, message_id, message, sender)
	if message_id == cursor.CLICKED then
		if message.id == hash("/speed") then
			msg.post(self.url_robot1, "add_speed")
		elseif message.id == hash("/start") then
			msg.post(self.url_robot1, "enable_all_circles")
			msg.post(self.url_robot2, "enable_all_circles")

		elseif message.id == hash("/shield") then
			msg.post(self.url_robot1, "add_shield")

		elseif message.id == hash("/weapon_left") then
			msg.post(self.url_robot1, "add_weapon_left")

		elseif message.id == hash("/weapon_right") then
			msg.post(self.url_robot1, "add_weapon_right")

		elseif message.id == hash("/vector_up") then
			msg.post(self.url_robot1, "up_move_vector")

		elseif message.id == hash("/vector_down") then
			msg.post(self.url_robot1, "down_move_vector")

		end
	end
end

local CAMERA_ID = hash("/camera")
function on_input(self, action_id, action)
		local screen = vmath.vector3(action.x, action.y, 0)
	local world = camera.screen_to_world(CAMERA_ID, screen)
	action.x = world.x
	action.y = world.y
	msg.post("#cursor", "input", { action_id = action_id, action = action })
end

function on_reload(self)
	-- Add reload-handling code here
	-- Learn more: https://defold.com/manuals/hot-reload/
	-- Remove this function if not needed
end
